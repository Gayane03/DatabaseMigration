@inject LocalStorageHelper localStorageHelper;
@inject NavigationManager Navigation

<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="/migration"></a>
        <button title="" class="navbar-toggler" @onclick="ToggleNavMenu">
            <span class="navbar-toggler-icon"></span>
        </button>
    </div>
</div>

<div class="@NavMenuCssClass nav-scrollable" @onclick="ToggleNavMenu">
    <nav class="flex-column">
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="/info" Match="NavLinkMatch.All">
                <span class="bi bi-house-door-fill-nav-menu" aria-hidden="true"></span> INFORMATION
            </NavLink>
        </div>
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="/migration">
                <span class="bi bi-plus-square-fill-nav-menu" aria-hidden="true"></span> MIGRATION
            </NavLink>
        </div>
        <div class="nav-item px-3">
              <MudButton class="nav-link" OnClick="Logout">
                <span class="bi bi-plus-square-fill-nav-menu" aria-hidden="true"></span> Logout
            </MudButton>
        </div>

    </nav>
</div>


@code {
    private bool collapseNavMenu = true;

    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    private async Task Logout()
    {
    	await localStorageHelper.RemoveToken(TokenStorageName.EmailVerification);
    	await localStorageHelper.RemoveToken(TokenStorageName.UserAccess);

        Navigation.NavigateTo(Route.Registration);
    }

}
